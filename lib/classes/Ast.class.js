const _=require("lodash"),log=require("signale"),CONSTANTS=require("../Constants"),Rule=require("./Rule.class"),hash=require("object-hash"),REMOVEABLE_PROPS=["position"],cleanUnusedProperties=e=>{for(let s in e){REMOVEABLE_PROPS.includes(s)&&delete e[s];const t=e[s];(Array.isArray(t)||"object"==typeof t)&&cleanUnusedProperties(t)}},handleRule=(e,s)=>{if(!Rule.isComment(e))if(cleanUnusedProperties(e),Rule.isMediaRule(e)){const t=Ast.MEDIA_PREFIX+e.media,r=s.get(t),l=e.rules;if(r&&r.length>0){const e=l.filter(e=>{const s=hash.MD5(e);return!r.some(e=>e.hash===s)}).map(e=>{return{hash:hash.MD5(e),rule:e}});s.set(t,[...r,...e])}else s.set(t,l.map(e=>{return{hash:hash.MD5(e),rule:e}}))}else{const t=Rule.generateRuleKey(e),r=s.get(t),l=hash.MD5(e);r?r.some(e=>e.hash===l)||r.push({hash:l,rule:e}):s.set(t,[{hash:l,rule:e}])}};class Ast{static generateRuleMap(e,s=new Map){if(e.type&&"stylesheet"===e.type&&e.stylesheet&&Array.isArray(e.stylesheet.rules)){const t=e.stylesheet.rules;for(const e of t)handleRule(e,s)}return s}static getAstOfRuleMap(e){const s={type:"stylesheet",stylesheet:{rules:[]}},t=s.stylesheet.rules;for(let[s,r]of e)if(s.includes(Ast.MEDIA_PREFIX)){const e=s.replace(Ast.MEDIA_PREFIX,"");t.push({type:"media",media:e,rules:r.map(e=>e.rule)})}else t.push(...r.map(e=>e.rule));return s}static isMediaObj(e){return e.includes(Ast.MEDIA_PREFIX)}}Ast.TYPES_TO_REMOVE=["comment"],Ast.MEDIA_PREFIX="@media ",module.exports=Ast;