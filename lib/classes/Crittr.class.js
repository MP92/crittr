"use strict";const fs=require("fs-extra"),util=require("util"),readFilePromise=util.promisify(fs.readFile),debug=require("debug")("Crittr Class"),log=require("signale"),chalk=require("chalk"),merge=require("deepmerge"),Queue=require("run-queue"),puppeteer=require("puppeteer"),devices=require("puppeteer/DeviceDescriptors"),DEFAULTS=require("../Constants"),CssTransformator=require("./CssTransformator.class"),extractCriticalCss_script=require("../browser/extract_critical_with_css");class Crittr{constructor(e){this.options={css:null,urls:[],timeout:DEFAULTS.TIMEOUT,pageLoadTimeout:DEFAULTS.PAGE_LOAD_TIMEOUT,browser:{userAgent:DEFAULTS.BROWSER_USER_AGENT,isCacheEnabled:DEFAULTS.BROWSER_CACHE_ENABLED,isJsEnabled:DEFAULTS.BROWSER_JS_ENABLED,concurrentTabs:DEFAULTS.BROWSER_CONCURRENT_TABS},device:{width:DEFAULTS.DEVICE_WIDTH,height:DEFAULTS.DEVICE_HEIGHT,scaleFactor:DEFAULTS.DEVICE_SCALE_FACTOR,isMobile:DEFAULTS.DEVICE_IS_MOBILE,hasTouch:DEFAULTS.DEVICE_HAS_TOUCH,isLandscape:DEFAULTS.DEVICE_IS_LANDSCAPE},puppeteer:{browser:null,chromePath:null,headless:DEFAULTS.PUPPETEER_HEADLESS},printBrowserConsole:DEFAULTS.PRINT_BROWSER_CONSOLE,dropKeyframes:DEFAULTS.DROP_KEYFRAMES,keepSelectors:[],removeSelectors:[],blockRequests:["maps.gstatic.com","maps.googleapis.com","googletagmanager.com","google-analytics.com","google.","googleadservices.com","generaltracking.de","bing.com","doubleclick.net"]},this.options=merge(this.options,e),this._browser=null,this._cssTransformator=new CssTransformator,"string"==typeof this.options.device&&(devices[this.options.device]?this.options.device=devices[this.options.device].viewport:log.error("Option 'device' is set as string but has an unknown value. Use devices of puppeteer (https://github.com/GoogleChrome/puppeteer/blob/master/DeviceDescriptors.js) or an object!"));const t=this.validateOptions();t.length>0&&(t.forEach(({message:e})=>{log.error(e)}),process.exit(1))}validateOptions(){const e=[];return Array.isArray(this.options.urls)||e.push({message:"Url not valid"}),"string"!=typeof this.options.css&&e.push({message:"css not valid. Expected string got "+typeof this.options.css}),e}run(){return new Promise(async(e,t)=>{debug("run - Starting run ...");let r="",s=[];try{debug("run - Get css content ..."),this._cssContent=await this.getCssContent(),debug("run - Get css content done!")}catch(e){debug("run - ERROR while extracting css content"),t(e)}try{debug("run - Starting browser ..."),this._browser=await this.getBrowser(),debug("run - Browser started!")}catch(e){debug("run - ERROR: Browser could not be launched ... abort!"),t(e)}try{debug("run - Starting critical css extraction ..."),[r,s]=await this.getCriticalCssFromUrls(),s.length>0&&(log.warn("Some of the urls had errors. Please review them below!"),this.printErrors(s)),debug("run - Finished critical css extraction!")}catch(e){debug("run - ERROR while critical css extraction"),t(e)}try{debug("run - Browser closing ..."),await this._browser.close(),debug("run - Browser closed!")}catch(e){debug("run - ERROR: Browser could not be closed -> already closed?")}debug("run - Extraction ended!"),e(r)})}getBrowser(){return new Promise(async(e,t)=>{try{null!==this.options.puppeteer.browser&&e(this.options.puppeteer.browser),e(await puppeteer.launch({ignoreHTTPSErrors:!0,args:["--disable-setuid-sandbox","--no-sandbox","--ignore-certificate-errors","--disable-dev-shm-usage"],dumpio:!1,headless:this.options.puppeteer.headless,executablePath:this.options.puppeteer.chromePath}).then(e=>e))}catch(e){t(e)}})}gracefulClosePage(e,t){return new Promise(async(r,s)=>{this.printErrors(t);try{debug("gracefulClosePage - Closing page after error gracefully ..."),await e.close(),debug("gracefulClosePage - Page closed gracefully!")}catch(e){debug("gracefulClosePage - Error while closing page -> already closed?")}r()})}printErrors(e){if(e)if(log.warn(chalk.red("Errors occured during processing. Please have a look and report them if necessary")),Array.isArray(e))for(let t of e)log.error(t);else log.error(e)}getPage(){return this._browser.newPage()}getCssContent(){return new Promise(async(e,t)=>{if("string"==typeof this.options.css){let r="";if(this.options.css.endsWith(".css"))try{0===(r=await readFilePromise(this.options.css,"utf8")).length&&t(new Error("No CSS content in file exists -> exit!"))}catch(e){t(e)}else r=this.options.css;e(r)}else e(!1)})}getCriticalCssFromUrls(){return new Promise(async(e,t)=>{let r=[];const s=this.options.urls,o=new Set,a=this._cssTransformator.getAst(this._cssContent),i=new Queue({maxConcurrency:this.options.browser.concurrentTabs}),c=async(e,t,s)=>{try{debug("getCriticalCssFromUrls - Try to get critical ast from "+e);const o=await this.evaluateUrl(e,t);s.add(o),debug("getCriticalCssFromUrls - Successfully extracted critical ast!")}catch(t){debug("getCriticalCssFromUrls - ERROR getting critical ast from promise"),log.error("Could not get critical ast for url "+e),log.error(t),r.push(t)}};for(let e of s)i.add(1,c,[e,a,o]);i.run().then(async()=>{0===o.size&&t(r);let s={type:"stylesheet",stylesheet:{rules:[]}};for(let e of o)try{e=this._cssTransformator.filterSelector(e,this.options.removeSelectors),s=await this._cssTransformator.merge(s,e)}catch(e){t(e)}const a=this._cssTransformator.getCssFromAst(s);e([a.code,r])}).catch(e=>{t(e)})})}evaluateUrl(e,t){return new Promise(async(r,s)=>{let o=3,a=!1,i=null,c=new Map,l=null;const n=async()=>new Promise((e,t)=>{try{this.getPage().then(t=>{e(t)}).catch(r=>{o-- >0?(log.warn("Could not get page from browser. Retry "+o+" times."),e(n())):(log.warn("Tried to get page but failed. Abort now ..."),t(r))})}catch(e){t(e)}});try{debug("evaluateUrl - Open new Page-Tab ..."),i=await n(),!0===this.options.printBrowserConsole&&i.on("console",e=>{const t=e.args();for(let e=0;e<t.length;++e)log.log(`${t[e]}`)}),debug("evaluateUrl - Page-Tab opened!")}catch(e){debug("evaluateUrl - Error while opening page tab -> abort!"),a=e}if(!1===a)try{let e=this.options.browser,t=this.options.device;debug("evaluateUrl - Set page properties ..."),await i.setCacheEnabled(e.isCacheEnabled),await i.setJavaScriptEnabled(e.isJsEnabled),await i.setRequestInterception(!0);const r=this.options.blockRequests;i.on("request",e=>{const t=e.url();if(r)for(const s of r)if(t.includes(s))return void e.abort();e.continue()}),await i.emulate({viewport:{width:t.width,height:t.height,deviceScaleFactor:t.scaleFactor,isMobile:t.isMobile,hasTouch:t.hasTouch,isLandscape:t.isLandscape},userAgent:e.userAgent}),debug("evaluateUrl - Page properties set!")}catch(e){debug("evaluateUrl - Error while setting page properties -> abort!"),a=e}if(!1===a)try{debug("evaluateUrl - Navigating page to "+e),await i.goto(e,{timeout:this.options.timeout,waitUntil:["networkidle2"]}),debug("evaluateUrl - Page navigated")}catch(t){debug("evaluateUrl - Error while page.goto -> "+e),a=t}if(!1===a){try{debug("evaluateUrl - Extracting critical selectors"),await i.waitFor(250),c=new Map(await i.evaluate(extractCriticalCss_script,{sourceAst:t,loadTimeout:this.options.pageLoadTimeout,keepSelectors:this.options.keepSelectors,dropKeyframes:this.options.dropKeyframes})),debug("evaluateUrl - Extracting critical selectors - successful! Length: "+c.size)}catch(e){debug("evaluateUrl - Error while extracting critical selectors -> not good!"),a=e}debug("evaluateUrl - cleaning up AST with criticalSelectorMap"),l=this._cssTransformator.filterByMap(t,c),debug("evaluateUrl - cleaning up AST with criticalSelectorMap - END")}if(!1===a)try{debug("evaluateUrl - Closing page ..."),await i.close(),debug("evaluateUrl - Page closed")}catch(e){a=e,debug("evaluateUrl - Error while closing page -> already closed?")}if(!1!==a){try{await this.gracefulClosePage(i,a)}catch(e){}s(a)}r(l)})}}module.exports=Crittr;