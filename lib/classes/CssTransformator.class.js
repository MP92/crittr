"use strict";const _=require("lodash"),debug=require("debug")("Crittr CSSTransformator"),log=require("signale"),merge=require("deepmerge"),css=require("css"),Rule=require("./Rule.class");class CssTransformator{constructor(e){e=e||{},this.options={silent:!0,source:null},this.options=merge(this.options,e);this._TYPES_TO_REMOVE=["comment"],this._TYPES_TO_KEEP=["charset","font-face"];const s=[":before",":after",":visited",":first-letter",":first-line"].map(e=>":?"+e).join("|");this._PSUEDO_SELECTOR_REGEXP=new RegExp(s,"g")}getAst(e){let s=null;try{debug("getAst - Try parsing css to ast ..."),s=css.parse(e,{silent:this.options.silent,source:this.options.source}),debug("getAst - Css successfully parsed to ast ...")}catch(e){log.error(e)}return s}getCssFromAst(e){return debug("getCssFromAst - Create css string out of AST"),css.stringify(e,{indent:"  ",compress:!1,sourcemap:!0,inputSourcemaps:!0})}filterSelector(e,s){if(!Array.isArray(s))return log.warn("removeSelectors have to be an array to be processed"),!1;let r=e;e.stylesheet?r=e.stylesheet.rules:e.rules&&(r=e.rules);const t=(e,s)=>s-e,l=[];for(const e in r)if(r.hasOwnProperty(e)){const i=r[e];if(Rule.isMediaRule(i))this.filterSelector(i,s);else{const r=i.selectors,u=[];for(let t in r)if(r.hasOwnProperty(t)){const i=r[t];s.includes(i)&&(r.length>1?u.push(t):l.push(e))}u.sort(t);for(let e of u)r.splice(e,1)}}l.sort(t);for(let e of l)r.splice(e,1);return e}filterByMap(e,s){let r=JSON.parse(JSON.stringify(e)),t=JSON.parse(JSON.stringify(e)),l=null,i=null,u="",o="",n=[];"stylesheet"===r.type?(l=r.stylesheet,i=t.stylesheet):r.rules&&"media"===r.type?(l=r,i=t,u=r.media||"",o=t.media||""):debug("Missing ast rules!!!");const a=(e,s,r)=>e.some(e=>r.has(s+e));for(let e of l.rules)if("media"===e.type){const r=l.rules.indexOf(e),[t,u]=this.filterByMap(e,s);l.rules[r];l.rules[r]=t,i.rules[r]=u,t&&t.rules&&0===t.rules.length&&n.push(t)}else"rule"===e.type?a(e.selectors,u,s)||n.push(e):this._TYPES_TO_KEEP.includes(e.type)||n.push(e);const c=l.rules.filter(e=>!n.includes(e)),g=l.rules.filter(e=>!c.includes(e));return l.rules=c,t.rules=g,[r,t]}merge(e,s){return new Promise((r,t)=>{if(debug("merge - Try to merge into targetAst..."),e.type&&"stylesheet"===e.type&&e.stylesheet&&Array.isArray(e.stylesheet.rules))try{let l=s.stylesheet.rules,i=e.stylesheet.rules;for(let e of l)this.mergeRule(e,i);debug("merge - Successfully merged into targetAst!"),r(e)}catch(e){debug("merge - general error occured."),t(e)}else debug("merge - ERROR because of missing properties!"),t(new Error("AST Merge failed due to missing properties"))})}mergeRule(e,s){if(Rule.isMediaRule(e))this.mergeMediaRule(e,s);else if(s.length>0){let r=!1;for(let t of s)if(Rule.isSameRuleType(t,e)&&Rule.isRuleDuplicate(t,e,["position"])){r=!0;break}r||s.push(e)}else s.push(e)}mergeMediaRule(e,s){const r=e.media,t=e.rules;let l=[],i=!0;for(let e of s)if(Rule.isMediaRule(e)&&Rule.isMatchingMediaRuleSelector(r,e.media)){l=e.rules,i=!1;break}if(i)s.push(e);else for(let e of t)this.mergeRule(e,l)}}module.exports=CssTransformator;