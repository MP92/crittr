"use strict";const _=require("lodash"),debug=require("debug")("Crittr CSSTransformator"),log=require("signale"),merge=require("deepmerge"),css=require("css"),Rule=require("./Rule.class");class CssTransformator{constructor(e){e=e||{},this.options={silent:!0,source:null},this.options=merge(this.options,e);this._TYPES_TO_REMOVE=["comment"],this._TYPES_TO_KEEP=["charset","font-face"];const s=[":before",":after",":visited",":first-letter",":first-line"].map(e=>":?"+e).join("|");this._PSUEDO_SELECTOR_REGEXP=new RegExp(s,"g")}getAst(e){let s=null;try{debug("getAst - Try parsing css to ast ..."),s=css.parse(e,{silent:this.options.silent,source:this.options.source}),debug("getAst - Css successfully parsed to ast ...")}catch(e){log.error(e)}return s}getCssFromAst(e){return debug("getCssFromAst - Create css string out of AST"),css.stringify(e,{indent:"  ",compress:!1,sourcemap:!0,inputSourcemaps:!0})}matchesForceInclude(e,s){return s.some(s=>{if("RegExp"===s.type){const{source:t,flags:r}=s;return new RegExp(t,r).test(e)}return s.value===e})}filter(e,s){return new Promise((t,r)=>{if(debug("filter - Filtering ast from source"),s.stylesheet){let r=s.stylesheet.rules;e.stylesheet=e.stylesheet||{rules:[]};let l=e.stylesheet.rules;s.stylesheet.rules=this.filterRules(l,r),debug("filter - Successfully filtered AST!"),t(s)}else debug("filter - ERROR no stylesheet property"),r(new Error("Target AST has no root node stylesheet. Stylesheet is properly wrong!"))})}filterRules(e,s){return _.filter(s,(s,t,r)=>{if(this._TYPES_TO_REMOVE.includes(s.type))return!1;if(this._TYPES_TO_KEEP(s.type))return!0;if("media"===s.type){let t=[];for(let r of e)"comment"!==r.type&&"media"===r.type&&Rule.isMatchingMediaRuleSelector(s.media,r.media)&&(t=t.concat(r.rules));return s.rules=_.filter(s.rules,(e,s,r)=>{for(let s of t){if(!0===_.isEqual(s.selectors,e.selectors))return!0}return!1}),s.rules.length>0}for(let t of e){if("comment"===t.type)continue;if(!0===(this.isSameRuleType(t,s)&&_.isEqual(t.selectors,s.selectors)))return!0}return!1})}filterSelector(e,s){if(!Array.isArray(s))return log.warn("removeSelectors have to be an array to be processed"),!1;let t=e;e.stylesheet?t=e.stylesheet.rules:e.rules&&(t=e.rules);const r=(e,s)=>s-e,l=[];for(const e in t)if(t.hasOwnProperty(e)){const i=t[e];if(Rule.isMediaRule(i))this.filterSelector(i,s);else{const t=i.selectors,u=[];for(let r in t)if(t.hasOwnProperty(r)){const i=t[r];s.includes(i)&&(t.length>1?u.push(r):l.push(e))}u.sort(r);for(let e of u)t.splice(e,1)}}l.sort(r);for(let e of l)t.splice(e,1);return e}filterByMap(e,s){let t=JSON.parse(JSON.stringify(e)),r=null,l="",i=[];"stylesheet"===t.type?r=t.stylesheet:t.rules&&"media"===t.type?(r=t,l=t.media||""):debug("Missing ast rules!!!");const u=(e,s,t)=>e.some(e=>t.has(s+e));for(let e of r.rules)if("media"===e.type){const t=r.rules.indexOf(e),l=(r.rules[t],this.filterByMap(e,s));r.rules[t]=l,l&&l.rules&&0===l.rules.length&&i.push(l)}else"rule"===e.type?u(e.selectors,l,s)||i.push(e):this._TYPES_TO_KEEP.includes(e.type)||i.push(e);return r.rules=r.rules.filter(e=>!i.includes(e)),t}merge(e,s){return new Promise((t,r)=>{if(debug("merge - Try to merge into targetAst..."),e.type&&"stylesheet"===e.type&&e.stylesheet&&Array.isArray(e.stylesheet.rules))try{let l=s.stylesheet.rules,i=e.stylesheet.rules;for(let e of l)this.mergeRule(e,i);debug("merge - Successfully merged into targetAst!"),t(e)}catch(e){debug("merge - general error occured."),r(e)}else debug("merge - ERROR because of missing properties!"),r(new Error("AST Merge failed due to missing properties"))})}mergeRule(e,s){if(Rule.isMediaRule(e))this.mergeMediaRule(e,s);else if(s.length>0){let t=!1;for(let r of s)if(Rule.isSameRuleType(r,e)&&Rule.isRuleDuplicate(r,e,["position"])){t=!0;break}t||s.push(e)}else s.push(e)}mergeMediaRule(e,s){const t=e.media,r=e.rules;let l=[],i=!0;for(let e of s)if(Rule.isMediaRule(e)&&Rule.isMatchingMediaRuleSelector(t,e.media)){l=e.rules,i=!1;break}if(i)s.push(e);else for(let e of r)this.mergeRule(e,l)}}module.exports=CssTransformator;