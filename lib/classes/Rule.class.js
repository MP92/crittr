const _=require("lodash"),log=require("signale"),CONSTANTS=require("../Constants");class Rule{static isRuleDuplicate(e,t,s){return s=s||[],_.isEqualWith(e,t,(e,t,r)=>{if(s.includes(r))return!0})}static isSameRuleType(e,t){return e.type===t.type}static isMediaRule(e){return"media"===e.type}static isRule(e){return"rule"===e.type}static isKeyframe(e){return"keyframe"===e.type}static isKeyframes(e){return"keyframes"===e.type}static isCharset(e){return"charset"===e.type}static isComment(e){return"comment"===e.type}static isStylesheet(e){return"stylesheet"===e.type}static isImportantRule(e){return Rule.isMediaRule(e)||Rule.isRule(e)}static isMatchingMediaRuleSelector(e,t){return e===t||e===t.replace("all and ","")||t===e.replace("all and ","")||e.replace("all and ","")===t.replace("all and ","")}static generateRuleKey(e,t="",s=!1){const r=s?CONSTANTS.RULE_SEPARATOR:"";let i;if(Rule.isRule(e)&&e.selectors)i=e.selectors.join();else if(Rule.isCharset(e))i=e.charset;else if(Rule.isKeyframes(e))i=e.name;else if(Rule.isKeyframe(e))i=e.values.join();else{if(!Rule.isMediaRule(e))return!Rule.isComment(e)&&(log.error("Can not generate rule key of rule without selectors! Maybe this is a media query?",e),!1);i=e.media}return t+r+i}}module.exports=Rule;