const _=require("lodash"),log=require("signale"),CONSTANTS=require("../Constants");class Rule{static isRuleDuplicate(e,t,s){return s=s||[],_.isEqualWith(e,t,(e,t,i)=>{if(s.includes(i))return!0})}static isSameRuleType(e,t){return e.type===t.type}static isMediaRule(e){return"media"===e.type}static isRule(e){return"rule"===e.type}static isKeyframe(e){return"keyframe"===e.type}static isKeyframes(e){return"keyframes"===e.type}static isCharset(e){return"charset"===e.type}static isComment(e){return"comment"===e.type}static isFontFace(e){return"font-face"===e.type}static isStylesheet(e){return"stylesheet"===e.type}static isImportantRule(e){return Rule.isMediaRule(e)||Rule.isRule(e)}static isMatchingMediaRuleSelector(e,t){return e===t||e===t.replace("all and ","")||t===e.replace("all and ","")||e.replace("all and ","")===t.replace("all and ","")}static generateRuleKey(e,t="",s=!1){const i=s?CONSTANTS.RULE_SEPARATOR:"";let a="default";if(Rule.isRule(e)&&e.selectors)a=e.selectors.join();else if(Rule.isCharset(e))a=e.charset;else if(Rule.isKeyframes(e))a=e.name;else if(Rule.isKeyframe(e))a=e.values.join();else if(Rule.isMediaRule(e))a=e.media;else{if(!Rule.isFontFace(e))return!Rule.isComment(e)&&a;a=e.type}return t+i+a}}module.exports=Rule;