@charset "UTF-8";

@font-face {
    font-family: 'Keep Critical';
    src: url('ONLY TEST');
}

body {
    font-size: 1em;
    font-weight: 400;
    font-style: normal;
}

.standard-selector {
    color: black;
}

/* FOR DUPLICATE TEST */
.standard-selector {
    color: black;
}

#id-selector {
    color: blue;
}

div {
    color: darkgrey;
}

.child-selector > * {
    color: brown;
}

.sibling-selector + .sibling {
    color: green;
}

.sibling-general-selector ~ .sibling {
    color: aqua;
}

/* prettier-ignore */
.property-selector[data-test="test"] {
    color: bisque;
}

.group-selector .deep1 .deep2 {
    color: chartreuse;
}

.multi-selector,
.multi-selector-1,
.multi-selector-2 {
    color: darkmagenta;
}

.multi-selector,
.no-atf-css {
    color: red;
}

.no-atf-css-default {
    color: tomato;
}

.forceInclude {
    color: deeppink;
}

.multi-selector,
.forceInclude,
.multi-selector-not-exists {
    content: 'forceIncludeMultiSelector';
}

.forceExclude {
    color: royalblue;
}

.multi-selector,
.forceExclude,
.multi-selector-1 {
    content: 'forceExcludeMultiSelector';
}

:root .not-existing-selector {
    content: 'should not be included';
}

h1,
h2,
h3,
h4,
h5,
h6 {
    font-size: 22px;
}

.vendor_prefix {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

.pseudo-selector::after {
    color: limegreen;
    content: 'pseudo :after';
}

.pseudo-selector::before {
    color: silver;
    content: 'pseudo ::before';
}

.multi-selector,
.not-exists .remaining-css,
.multi-selector-1 {
    content: 'should only have multi-selector and multi-selector-1 in criticalcss';
}

.pre .wildcard_test_1 .post {
    content: 'wildcard test [not included in HTML] - SHOULD BE INCLUDED';
}

.pre .wildcard_test_2 .post {
    content: 'wildcard test [not included in HTML] - SHOULD NOT BE INCLUDED';
}

.wildcard_test_3.space {
    content: 'SHOULD NOT BE INCLUDED';
}

/* === BEGIN :is selectors === */
:is(.critical-is) {
    border: 1px solid #ccc;
}

/* at the beginning */
:is(.critical-is) > b {
    color: hotpink;
}

/* in the middle */
.critical-is :is(header, footer) > span {
    color: gray;
}

/* at the end */
.critical-is :is(button, a) {
    color: rebeccapurple;
}

/* multiple */
:is(.critical-is, .critical-is-2) :is(button, a) {
    color: forestgreen;
}

/* stacked */
:is(.critical-is, .critical-is-2):is(section, div) {
    text-transform: uppercase;
}

/* nested */
.critical-is:is(section, div, :is(.section, .div)) {
    background-color: lime;
}

:is(.btf-is) > b {
    color: hotpink;
}

.btf-is:is(section, div, :is(.section, .div)) {
    background-color: lime;
}
/* === END :is selectors === */

/* === BEGIN :where selectors === */
:where(.critical-where) {
    border: 1px solid #ccc;
}

/* at the beginning */
:where(.critical-where) > b {
    color: hotpink;
}

/* in the middle */
.critical-where :where(header, footer) > span {
    color: gray;
}

/* at the end */
.critical-where :where(button, a) {
    color: rebeccapurple;
}

/* multiple */
:where(.critical-where, .critical-where-2) :where(button, a) {
    color: forestgreen;
}

/* stacked */
:where(.critical-where, .critical-where-2):where(section, div) {
    text-transform: uppercase;
}

/* nested */
.critical-where:where(section, div, :where(.section, .div)) {
    background-color: lime;
}

:where(.btf-where) > b {
    color: hotpink;
}

.btf-where:where(section, div, :where(.section, .div)) {
    background-color: lime;
}
/* === END :where selectors === */

/* === BEGIN :not selectors === */
:not(:not(.critical-not)) {
    background: lemonchiffon;
}

.critical-not:not([id]) {
    border: 2px dashed dimgrey;
}

/* prettier-ignore */
.critical-not input:not(:required, [type="button"]) {
    background: chocolate;
}

.critical-not input:not(div > input) {
    border: 2px solid greenyellow;
}

.critical-not span:not([class]):not(:last-child) {
    background: burlywood;
}

:not(:not(.btf-not)) {
    font-size: 8px;
}

.btf-not span:not([class]):not(:last-child) {
    background: burlywood;
}
/* === END :not selectors === */

/* === BEGIN :has selectors === */
:has(> .critical-has-inner) {
    background-color: lightsalmon;
}

.critical-has-inner:has(+ span) {
    box-shadow: inset 0 0 4px 0 black;
}

.critical-has:has(.critical-has-inner):has(a) span {
    color: white;
}

:has(> .btf-has-inner) {
    background-color: lightsalmon;
}

.btf-has:has(> span) {
    box-shadow: inset 0 0 0 4px black;
}
/* === END :has selectors === */

@supports (display: flex) {
    .supports-selector {
        content: 'supports test - should be included';
    }
}

@supports (display: flex) {
    .supports-selector-not-included {
        content: 'supports test - not included';
    }
}

@media (min-width: 1024px) {
    .standard-selector {
        color: black;
        content: '.standard-selector 1024';
    }

    #id-selector {
        color: blue;
        content: '#id-selector 1024';
    }

    div {
        color: darkgrey;
        content: 'div 1024';
    }

    .pseudo-selector::after {
        color: limegreen;
        content: 'pseudo 1024 :after';
    }

    .pseudo-selector::before {
        color: silver;
        content: 'pseudo 1024 ::before';
    }

    .no-atf-css-default-1024 {
        color: tomato;
    }

    .forceInclude {
        color: deeppink;
    }

    .forceExclude {
        color: royalblue;
    }

    .multi-selector,
    .not-exists-mq-1024 .remaining-css,
    .multi-selector-1 {
        content: 'should only have multi-selector and multi-selector-1 in criticalcss';
    }
}

@media (min-width: 1024px) {
    .standard-selector {
        content: 'double media query 1024 .standard-selector';
    }
}

@media (min-width: 1024px) {
    .standard-selector {
        content: 'double media query 1024 .standard-selector';
    }
}

@media (min-width: 900px) {
    .no-atf-css-default {
        color: gold;
    }

    .standard-selector {
        color: black;
        content: '.standard-selector 800';
    }
}

@media (min-width: 800px) {
    .standard-selector {
        color: black;
        content: '.standard-selector 800';
    }

    #id-selector {
        color: blue;
        content: '#id-selector 800';
    }

    div {
        color: darkgrey;
        content: 'div 800';
    }

    .no-atf-css-default-800 {
        color: tomato;
    }

    .forceInclude {
        color: deeppink;
    }

    .forceExclude {
        color: royalblue;
    }

    @supports (display: flex) {
        .supports-selector {
            content: 'supports test mq - should be included';
        }
    }

    @supports (display: flex) {
        .supports-selector-not-included {
            content: 'supports test - not included';
        }
    }
}

@media (max-width: 1337px) {
    .no-selector {
        content: 'just no';
    }
    .standard-selector {
        color: black;
        content: '.standard-selector 800';
    }
}

@media (max-width: 337px) {
    .no-selector {
        content: 'just no';
    }
}
